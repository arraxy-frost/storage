import {
    PutObjectCommand,
    PutObjectCommandInput,
    PutObjectCommandOutput,
    ListObjectsV2Command,
    ListObjectsV2CommandInput,
    ListObjectsV2CommandOutput
} from '@aws-sdk/client-s3'
import { Injectable } from '@nestjs/common'
import { InjectS3, S3 } from 'nestjs-s3'
import { randomUUID } from 'crypto'

@Injectable()
export class FilesService {
    constructor(@InjectS3() private readonly s3: S3) {}

    async uploadObject(file: Express.Multer.File): Promise<string> {
        let key = randomUUID()

        const input: PutObjectCommandInput = {
            Body: file.buffer,
            Bucket: process.env.S3_BUCKET,
            Key: key,
            ContentType: file.mimetype,
            ACL: 'public-read'
        }

        try {
            const response: PutObjectCommandOutput = await this.s3.send(new PutObjectCommand(input))

            if (response.$metadata.httpStatusCode === 200) {
                return key
            }
        } catch (err) {
            throw err
        }
    }

    // Autogenerated method, not used for now
    async deleteObject(key: string): Promise<void> {
        const input: PutObjectCommandInput = {
            Bucket: process.env.S3_BUCKET,
            Key: key
        }

        try {
            await this.s3.send(new PutObjectCommand(input))
        } catch (err) {
            throw err
        }
    }

    async listObjects(): Promise<string[]> {
        const input: ListObjectsV2CommandInput = {
            Bucket: process.env.S3_BUCKET
        }

        try {
            const response: ListObjectsV2CommandOutput = await this.s3.send(
                new ListObjectsV2Command(input)
            )

            if (response.Contents) {
                return response.Contents.map((item) => item.Key).filter(Boolean) as string[]
            }

            return []
        } catch (err) {
            throw err
        }
    }
}
